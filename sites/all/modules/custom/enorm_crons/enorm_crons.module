<?php

function enorm_crons_cronapi($op, $job = NULL)
{
    $items['enorm_crons_new_projects_cron'] = array(
        'description' => 'Look for new projects in Teamleader once every night, and add them to ComPort. While possible, its highly discouraged to force this cron due to major performance drops.',
        'rule' => '30 1 * * *',
    );
    $items['enorm_crons_new_companies_cron'] = array(
        'description' => 'Look for new companies in Teamleader once every night, and add them to ComPort. While possible, its highly discouraged to force this cron due to major performance drops.',
        'rule' => '30 2 * * *',
    );
    $items['enorm_crons_new_invoices_cron'] = array(
        'description' => 'Look for new invoices in Teamleader once every night, and add them to ComPort. While possible, its highly discouraged to force this cron due to major performance drops.',
        'rule' => '30 3 * * *',
    );
    return $items;
}

function enorm_crons_new_invoices_cron()
{
    $result = enorm_crons_check_new_invoices();
    $already_saved = 0;
    $newly_saved = 0;
    foreach ($result['data'] as $value) {
        $exists = enorm_crons_check_invoice_id($value['id']);
        if (!empty($exists)) {
            //dan is ie al opgeslagen
            $already_saved++;
        } else {
            if ($value['status'] === 'draft') {
                //discard, dont want drafts
             $newly_saved++;
            } else {
                //nog niet opgeslagen
                enorm_crons_save_new_invoice($value['id'], $value['invoice_number'], $value['invoicee']['customer']['id'], $value['total']['due']['amount'], $value['invoice_date'], $value['invoicee']['name']);
            }
        }
    }
    watchdog('EnoRm', t('New Invoice Cron Executed:' . $newly_saved . 'items, ' . $already_saved . 'items already saved and not saving.'), array(), WATCHDOG_INFO, NULL);
}

function enorm_crons_save_new_invoice($invoice_id, $node_title, $company_teamleader_id, $invoice_total, $invoice_date, $company_name)
{
    global $user;
    $node = new stdClass();
    $node->title = $node_title;
    $node->type = "content_type_invoice";
    $node->language = 'en';
    $node->uid = $user->uid;
    $node->status = 1;
    $node->promote = 0;
    $node->field_invoice_total[LANGUAGE_NONE][0]['value'] = $invoice_total;
    $node->field_invoice_company_name[LANGUAGE_NONE][0]['value'] = $company_name;
    $node->field_invoice_date[LANGUAGE_NONE][0]['value'] = $invoice_date;
    $node->field_invoice_company_id[LANGUAGE_NONE][0]['value'] = $company_teamleader_id;
    $node->field_invoice_invoice_id[LANGUAGE_NONE][0]['value'] = $invoice_id;
    node_object_prepare($node);
    $node = node_submit($node); // Prepare node for saving
    node_save($node);
    // Update database
    $nid = $node->nid;
    enorm_crons_new_invoice_database_insert($invoice_id, $nid);
}

function enorm_crons_new_invoice_database_insert($invoice_id, $nid)
{
    db_insert('teamleader_invoices')
        ->fields(array(
            'teamleader_invoice_id' => $invoice_id,
            'teamleader_invoice_nid' => $nid
        ))
        ->execute();
}

function enorm_crons_check_invoice_id($invoice_id)
{
    $result = db_select('teamleader_invoices', 'ti')
        ->fields('ti')
        ->condition('teamleader_invoice_id', $invoice_id, '=')
        ->execute()
        ->fetchAssoc();
    return $result;
}

function enorm_crons_check_new_invoices()
{
    $operation = "invoices.list";
    $postfields =
        "{
      \"page\": {
        \"size\": 100,
        \"number\": 1
      },
      \"sort\": [
        {
          \"field\": \"invoice_number\",
          \"order\": \"desc\"
        }
      ]
    }";
    return enorm_teamleader_call($operation, $postfields);
}

function enorm_crons_new_companies_cron()
{
    enorm_crons_check_new_companies();
}

function enorm_crons_check_new_companies()
{
    $last_updated = enorm_crons_get_company_list_by_date();
    foreach ($last_updated['data'] as $value) {
        // Check whether company has an 'added' tag already
        if (empty($value['tags'])) {
            $company_name = $value['name'];
            $company_id = $value['id'];
            enorm_crons_save_new_company($company_id, $company_name);
            // Unset vars, you never know..
            unset($company_name);
            unset($company_id);
        }

    }

}

function enorm_crons_save_new_company($company_id, $node_title)
{
    global $user;
    $node = new stdClass();
    $node->title = $node_title;
    $node->type = "content_type_company";
    $node->language = 'en';
    $node->uid = $user->uid;
    $node->status = 1;
    $node->promote = 0;
    $node->field_company_teamleader_id[LANGUAGE_NONE][0]['value'] = $company_id;
    node_object_prepare($node);
    $node = node_submit($node); // Prepare node for saving
    node_save($node);
    enorm_crons_update_company_tag($company_id);
}

function enorm_crons_update_company_tag($company_id)
{
    $operation = "companies.tag";
    $postfields = "{
      \"id\": \"" . $company_id . "\",
      \"tags\": [
        \"customerportal\"
      ]
    }";
    $result = enorm_teamleader_call_send($operation, $postfields);
}

function enorm_crons_get_company_list_by_date()
{
    $operation = "companies.list";
    $postfields = "{
      
      \"page\": {
        \"size\": 10,
        \"number\": 1
      },
      \"sort\": [
        {
          \"field\": \"added_at\",
          \"order\": \"desc\"
        }
      ]
    }";
    $result = enorm_teamleader_call($operation, $postfields);
    return $result;
}

function enorm_crons_new_projects_cron()
{

    $result = enorm_crons_get_project_list();
    $already_saved = 0;
    $new_saved = 0;
    foreach ($result['data'] as $value) {
        $exists = enorm_crons_check_project_id($value['id']);
        if (!empty($exists)) {
            //dan is ie al opgeslagen
            $already_saved++;
        } else {
            //nog niet opgeslagen
            $new_saved++;
            enorm_crons_save_new_project($value['id'], $value['title'], $value['customer']['id']);
        }
    }
    watchdog('EnoRm', t('New Project Cron Executed:' . $new_saved . 'items, ' . $already_saved . 'items already saved and not saving.'), array(), WATCHDOG_INFO, NULL);
}

function enorm_crons_save_new_project($teamleader_id, $node_title, $company_teamleader_id)
{
    global $user;
    $node = new stdClass();
    $node->title = $node_title;
    $node->type = "content_type_project";
    $node->language = 'en';
    $node->uid = $user->uid;
    $node->status = 1;
    $node->promote = 0;
    $node->field_project_teamleader_id[LANGUAGE_NONE][0]['value'] = $teamleader_id;
    $node->field_project_company_id[LANGUAGE_NONE][0]['value'] = $company_teamleader_id;
    node_object_prepare($node);
    $node = node_submit($node); // Prepare node for saving
    node_save($node);
    // Update database
    $nid = $node->nid;
    enorm_crons_milestone_processor($teamleader_id, $nid);
    enorm_crons_new_project_database_insert($teamleader_id, $nid);
}

function enorm_crons_milestone_processor($project_id, $nid) {
    $data = enorm_crons_get_milestones($project_id);
    if(!empty($data['data'])) {
        foreach ($data['data'] as $value) {
            enorm_crons_save_new_milestone($value['name'], $value['id'], $value['due_on'], $value['status'], $value['project']['id'], $value['project']['type'], $value['responsible_user']['id'], $value['actuals']['billable_amount']['amount'], $nid);
        }
    }
}

function enorm_crons_save_new_milestone($node_title, $milestone_id, $due_on, $milestone_status, $project_id, $project_type, $user_id, $billable_amount, $nid) {
    $due_on = explode('-', $due_on);
    $new_due_on = $due_on[2] . "/" . $due_on[1]  . "/" . $due_on[0];
    global $user;
    $node = new stdClass();
    $node->title = $node_title;
    $node->type = "content_type_milestone";
    $node->language = 'en';
    $node->uid = $user->uid;
    $node->status = 1;
    $node->promote = 0;
    $node->field_milestone_id[LANGUAGE_NONE][0]['value'] = $milestone_id;
    $node->field_milestone_due[LANGUAGE_NONE][0]['value'] = $new_due_on;
    $node->field_milestone_status[LANGUAGE_NONE][0]['value'] = $milestone_status;
    $node->field_milestone_project_id[LANGUAGE_NONE][0]['value'] = $project_id;
    $node->field_milestone_project_type[LANGUAGE_NONE][0]['value'] = $project_type;
    //CAUTION: This is no reference to a Drupal user, but the responsible user as defined in Teamleader.
    $node->field_milestone_user_id[LANGUAGE_NONE][0]['value'] = $user_id;
    $node->field_milestone_billable_amount[LANGUAGE_NONE][0]['value'] = $billable_amount;
    node_object_prepare($node);
    $node = node_submit($node); // Prepare node for saving
    node_save($node);
    $own_nid = $node->nid;
    // Update database
    enorm_crons_new_milestone_database_insert($milestone_id, $nid, $own_nid);
}

function enorm_crons_get_project_list()
{
    $operation = "projects.list";
    $postfields = "{
          \"page\": {
            \"size\": 100,
            \"number\": 1
          },
          \"sort\": [
            {
              \"field\": \"due_on\",
              \"order\": \"desc\"
            }
          ]
        }";
    $result = enorm_teamleader_call($operation, $postfields);
    return $result;
}

function enorm_crons_get_milestones($project_id) {
    $operation = "milestones.list";
    $postfields = "{
      \"filter\": {
        \"project_id\": \"" . $project_id . "\"
      },
      \"page\": {
        \"size\": 100,
        \"number\": 1
      },
      \"sort\": [
        {
          \"field\": \"due_on\",
          \"order\": \"desc\"
        }
      ]
    }";
    return enorm_teamleader_call($operation, $postfields);
}

function enorm_crons_new_milestone_database_insert($milestone_id, $nid, $own_nid) {
    db_insert('teamleader_milestones')
        ->fields(array(
            'teamleader_milestone_id' => $milestone_id,
            'teamleader_milestone_nid' => $nid,
            'teamleader_milestone_own_nid' => $own_nid
        ))
        ->execute();
}

function enorm_crons_check_milestone_id($milestone_id)
{
    $result = db_select('teamleader_milestones', 'tm')
        ->fields('tm')
        ->condition('teamleader_milestone_id', $milestone_id, '=')
        ->execute()
        ->fetchAssoc();
    return $result;
}

function enorm_crons_new_project_database_insert($teamleader_id, $nid)
{
    db_insert('teamleader_projects')
        ->fields(array(
            'teamleader_project_id' => $teamleader_id,
            'teamleader_project_nid' => $nid
        ))
        ->execute();
}

function enorm_crons_check_project_id($teamleader_id)
{
    $result = db_select('teamleader_projects', 'tp')
        ->fields('tp')
        ->condition('teamleader_project_id', $teamleader_id, '=')
        ->execute()
        ->fetchAssoc();
    return $result;
}