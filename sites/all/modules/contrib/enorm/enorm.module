<?php

/**
 * Implements hook_menu().
 */

function enorm_help($path, $arg)
{
    switch ($path) {
        case "admin/help#enorm":
            return t("This is the custom module for the EnoRm. communications dashboard. It provides integration with Teamleader and a bunch of other communication channels. Disabling it will break the dashboard beyond belief and you'll need the CLI to fix it. So don't disable it.");
            break;
    }
}

//function enorm_block_info()
//{
//    $blocks['enorm'] = array(
//        'info' => t('Enorm Teamleader'),
//        'cache' => DRUPAL_CACHE_PER_ROLE,
//    );
//    return $blocks;
//}
//
///**
// * Implements hook_block_view().
// */
//function enorm_block_view($delta = '')
//{
//    $block = array();
//    switch ($delta) {
//        case 'enorm':
//            $block['subject'] = t('Enorm Teamleader');
//            $block['content'] = array(
//                '#markup' => enorm_get_teamleader_data_current_projects(),
//            );
//            break;
//    }
//    return $block;
//}


/*
 * Teamleader Functions
 */

/*
 * Callback function for a custom page that searches for a companies Teamleader ID.
 */

function enorm_search_teamleader_company_id($string)
{
    $operation = "companies.list";
    $postfields = "{
          \"filter\": {
            \"term\": \"" . $string . "\"
          },
          \"page\": {
            \"size\": 20,
            \"number\": 1
          },
          \"sort\": [
            {
              \"field\": \"name\"
            }
          ]
        }";
    $result = enorm_teamleader_call($operation, $postfields);
    return $result;

}

/*
 * Callback function for a custom page that searches for a Projects Teamleader ID.
 */

function enorm_search_teamleader_project_id($string)
{
    $operation = "projects.list";
    $postfields = "{
          \"filter\": {
            \"term\": \"" . $string . "\"
          },
          \"page\": {
            \"size\": 20,
            \"number\": 1
          },
          \"sort\": [
            {
              \"field\": \"due_on\",
              \"order\": \"asc\"
            }
          ]
        }";
    $result = enorm_teamleader_call($operation, $postfields);
    return $result;

}

/*
 * Implements custom function that gets invoked in block view
 */
function enorm_get_teamleader_data_current_projects()
{
    $operation = "projects.list";
    $postfields = "{
      \"page\": {
        \"size\": 100,
        \"number\": 1
      },
      \"sort\": [
        {
          \"field\": \"due_on\",
          \"order\": \"asc\"
        }
      ]
    }";
    $data = enorm_teamleader_call($operation, $postfields);

    $results = count($data['data']) - 1;
    $projectlist = array();

    $i = 0;
    while ($i <= $results) {
        array_push($projectlist, $data['data'][$i]['title']);
        $i++;
    }

    $var = implode("<br>", $projectlist);
    $var = '<p>' . $var . '</p>';
    return $var;
}

/*
 * Callback function for all Teamleader calls.
 * $operation needs to be the action as defined in the API docs, i.e. projects.list
 * $postfields is the JSON object that dictates the filters and conditions for the API call.
 * It could return an array with data or an error. Errors contain an HTTP error code. Most common is 400, Token expired.
 */

function enorm_teamleader_call($operation, $postfields)
{
    // Get token from Drupal variable
    $code = variable_get('teamleader_access_token');
    $accessToken = $code['access_token'];

    // Initialize curl handle
    $ch = curl_init();

    // Set params for curl
    // @TODO URL is debug server, change when migrating to production
    curl_setopt($ch, CURLOPT_URL, 'https://private-anon-2b86fb5b17-teamleadercrm.apiary-proxy.com/' . $operation);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HEADER, FALSE);
    // Postfields is a JSON object. Check API docs for syntax.
    curl_setopt($ch, CURLOPT_POSTFIELDS, $postfields);
    // Authorization and content type header
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer ' . $accessToken, 'Content-Type: application/json'));
    curl_setopt($ch, CURLINFO_HEADER_OUT, true);

    $response = curl_exec($ch);
    curl_close($ch);

    $data = json_decode($response, true);

    return $data;
}

/**
 * Implements hook_node_view_alter().
 */
function enorm_node_view_alter(&$build)
{
//    $code = variable_get('teamleader_access_token');
//    $accessToken = $code['access_token'];
//    $ch = curl_init();
//    curl_setopt($ch, CURLOPT_URL, 'https://api.teamleader.eu/projects.info');
//    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
//    curl_setopt($ch, CURLOPT_POSTFIELDS, "{\"id\": \"910537\"}");
//    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Bearer ' . $accessToken]);
//    $response = curl_exec($ch);
//    $data = json_decode($response, true);
//    dpm($data);
//    if ($build['#bundle'] === 'content_type_project') {
//        dpm($build);
//        $teamleader_id = $build['field_project_teamleader_id'][0]['#markup'];
//        dpm($teamleader_id);
//    }
    if ($build['#bundle'] === 'content_type_project') {
        dpm($build);
        $data = enorm_get_teamleader_project_info($build['field_project_teamleader_id']['#items'][0]['value']);
        dpm($data);
        if($data['data']['description'] != NULL){
        $build['field_project_description'][0]['#markup'] = $data['data']['description'];
        }
        $build['field_project_start_date'][0]['#markup'] = $data['data']['starts_on'];
        $build['field_project_end_date'][0]['#markup'] = $data['data']['due_on'];
        $build['field_project_status'][0]['#markup'] = $data['data']['status'];
    }
}

function enorm_get_teamleader_project_info($project_id)
{
    $operation = "projects.info";
    $postfields = "{
        \"id\": \"" . $project_id . "\"
    }";
    $result = enorm_teamleader_call($operation, $postfields);
    return $result;
}

/*
 * Make admin role unavailable. Customer role also unavailable from normal user form.
 */

function enorm_form_user_register_form_alter(&$form, &$form_state, $form_id)
{
    $form['account']['roles'][3]['#access'] = FALSE;
    $form['account']['roles'][4]['#access'] = FALSE;
    $current_path = current_path();
    if ($current_path === 'admin/people/p2rp-create/customer') {
        $form['account']['roles'][3]['#access'] = FALSE;
        $form['account']['roles'][4]['#access'] = TRUE;
        $form['account']['roles'][5]['#access'] = FALSE;
        $form['account']['roles'][6]['#access'] = FALSE;
        $form['account']['roles'][7]['#access'] = FALSE;
        $form['account']['roles'][8]['#access'] = FALSE;
        $form['account']['roles'][9]['#access'] = FALSE;
    }
}

/*
 * Custom and global functions
 */

/**
 * Implements hook_node_access().
 * It looks for the target ID of entity references in both the content and the users profile.
 * It references to
 */
function enorm_node_access($node, $op, $account)
{
    if (!is_string($node)) {
        if ($node->type === 'content_type_project') {
            $role_keys = array_keys($account->roles);
            if (in_array('4', $role_keys)) {
                $profile2 = profile2_load_by_user($account->uid);
                $profile_group_id = $profile2['profile_type_klant']->field_profile_customer_company['und'][0]['target_id'];
                if ($op == "view") {
                    $access_value = $node->field_project_customer['und'][0]['target_id'];
                    if ($profile_group_id === $access_value) {
                        return NODE_ACCESS_ALLOW;
                    } else {
                        return NODE_ACCESS_DENY;
                    }
                } else {
                    return NODE_ACCESS_IGNORE;
                }
            } else {
                return NODE_ACCESS_IGNORE;
            }
        } elseif ($node->type === 'drive_link') {
            $role_keys = array_keys($account->roles);
            if (in_array('4', $role_keys)) {
                $profile2 = profile2_load_by_user($account->uid);
                $profile_group_id = $profile2['profile_type_klant']->field_profile_customer_company['und'][0]['target_id'];
                if (!is_string($node)) {
                    $node_group_id = $node->field_drive_link_customer['und'][0]['target_id'];
                };
                if ($op == "view") {
                    $access_value = $node->field_drive_link_visibility['und'];
                    $access_value_clean = array();
                    foreach ($access_value as $key => $value) {
                        array_push($access_value_clean, $value['value']);
                    }
                    $result = array_intersect($role_keys, $access_value_clean);
                    if (!empty($result) && $profile_group_id === $node_group_id) {
                        return NODE_ACCESS_ALLOW;
                    } else {
                        return NODE_ACCESS_DENY;
                    }
                } else {
                    return NODE_ACCESS_IGNORE;
                }
            } else {
                return NODE_ACCESS_IGNORE;
            }
        }
    }
}

function enorm_views_pre_render(&$view)
{
    if ($view->name == 'view_my_projects') {
        global $user;
        $profile2 = profile2_load_by_user($user->uid);
        $customer_group_id = $profile2['profile_type_klant']->field_customer_profile_group['und'][0]['target_id'];
        foreach ($view->result as $key => $result) {
            if ($result->field_field_group_project_customer[0]['raw']['target_id'] != $customer_group_id) {
                unset($view->result[$key]);
            }
        }
    }
    if ($view->name == 'views_customer_my_files' || $view->name == 'view_all_projects_nodes') {
        foreach ($view->result as $key => $result) {
            $node = node_load($result->nid);
            if (!node_access('view', $node)) {
                unset($view->result[$key]);
            }
        }
    }
}

/*
 * Register paths for custom forms. Note the access arguments.
 */

/**
 * Implements hook_menu().
 */
function enorm_menu()
{
    $menu['company-search'] = array
    (
        'title' => 'Search for Company ID',
        'description' => 'Search for a Companies Teamleader ID',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('enorm_company_search_form'),
        'access arguments' => array('access company search form'),
    );

    $menu['project-search'] = array
    (
        'title' => 'Search for Project ID',
        'description' => 'Search for a Projects Teamleader ID',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('enorm_project_search_form'),
        'access arguments' => array('access company search form'),
    );
    return $menu;
}

/**
 * Implements hook_form().
 */
function enorm_company_search_form($node, &$form_state)
{
    $form['name'] = array(
        '#title' => t("Company ID search"),
        '#type' => 'textfield',
        '#required' => TRUE,
    );

    $form['company_id'] = array(
        '#title' => t("ID Result"),
        '#type' => 'textfield',
        '#attributes' => array('readonly' => 'readonly', 'class' => array('company-search-form-company-id')),
        '#field_suffix' => t('Clicking the ID will copy it to your clipboard.'),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Search',
    );

    return $form;
}

/*
 * Implements hook_form_submit().
 * The function is called when enorm_company_search_form is submitted.
 * It takes the input from the user and sends it to a callback function that
 * requests the Teamleader project using the input as a search term. It then
 * checks whether there is a result. If there is, the original text and ID input
 * values are replaced with whatever Teamleader gives us. If not, it sets a message.
 */

function enorm_company_search_form_submit($form, &$form_state)
{
    $form_state['rebuild'] = TRUE;
    $search_string = $form_state['input']['name'];
    $result = enorm_search_teamleader_company_id($search_string);
//    $total = count($result['data']);

    if ($result['data'] != NULL) {
        $form_state['input']['name'] = $result['data'][0]['name'];
        $form_state['input']['company_id'] = $result['data'][0]['id'];
    } else {
        drupal_set_message(t("No company found. Perhaps a typo?"), 'error');
    }

}

/**
 * Implements hook_form().
 */
function enorm_project_search_form($node, &$form_state)
{
    $form['name'] = array(
        '#title' => t("Project name"),
        '#type' => 'textfield',
        '#required' => TRUE,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Search',
    );

    return $form;
}

/*
 * Implements hook_form_submit().
 * The function is called when enorm_company_search_form is submitted.
 * It takes the input from the user and sends it to a callback function that
 * requests the Teamleader project using the input as a search term. It then
 * checks whether there is a result. If there is, the original text and ID input
 * values are replaced with whatever Teamleader gives us. If not, it sets a message.
 */

function enorm_project_search_form_submit($form, &$form_state)
{
    $form_state['rebuild'] = TRUE;
    $search_string = $form_state['input']['name'];
    $result = enorm_search_teamleader_project_id($search_string);
    $total = count($result['data']);
    if ($result['data'] != NULL) {
        drupal_set_message($total . " results");
        for ($x = 0; $x < $total; $x++) {
            drupal_set_message("Title: " . $result['data'][$x]['title'] . ", ID: " . $result['data'][$x]['id']);
        }
    } else {
        drupal_set_message(t("No projects found. Perhaps a typo?"), 'error');
    }

}

/**
 * Implements hook_permission().
 */
function enorm_permission()
{
    return array(
        'access company search form' => array(
            'title' => t('Access the company search form'),
        )
    );
}